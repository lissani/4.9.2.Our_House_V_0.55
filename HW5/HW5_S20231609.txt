우선 지난 HW3에서 구현한 기본적인 사용법을 다시 설명하겠습다.

1) 키보드 q,w,e,r,t,y 입력에 따라 주 카메라가 세 기본축 방향으로 이동하도록 구현하였습니다.
- q: U축 음의 방향 이동
- w: U축 양의 방향 이동
- e: V축 음의 방향 이동
- r: V축 양의 방향 이동
- t: N축 음의 방향 이동
- y: N축 음의 방향 이동 

2) space를 입력받은 경우 앞선 축 이동 모드에서 축 회전 모드로 바뀌도록 설계하여 키보드 q,w,e,r,t,y 입력에 따라 주 카메라가 세 기본축 둘레로 회전하도록 구현하였습니다.
<space로 모드 전환 이후>
- q: U축 둘레 음의 회전
- w: U축 둘레 양의 회전
- e: V축 둘레 음의 회전
- r: V축 둘레 양의 회전
- t: N축 둘레 음의 회전
- y: N축 둘레 양의 회전

3) 마우스 휠에 반응하여 주 카메라가 화면을 확대/축소하도록 구현하였습니다. 마우스 휠을 올릴 경우 확대하고, 마우스 휠을 내릴 경우 축소하도록 설계하였습니다.

4) 동적 cctv 카메라를 1개 구현하였고, 해당 카메라는 윈도우 화면 왼쪽 가장 아래에 위치합니다. 키보드 입력 'v'를 받으면 주 카메라 인자 조절 모드에서 동적 cctv 인자 조절 모드로 변경되고, 카메라 이동이 불가하다는 점을 제외하고 축 회전과 확대/축소는 주 카메라와 동일한 방식으로 조절할 수 있습니다. 즉, 카메라 이동은 space 입력 후 q,w,e,r,t,y 키로 조절하고, 확대/축소는 마우스 휠로 조절합니다.
<v로 모드 전환 이후, space로 회전 모드 전환 가정하에>
- q: U축 둘레 음의 회전
- w: U축 둘레 양의 회전
- e: V축 둘레 음의 회전
- r: V축 둘레 양의 회전
- t: N축 둘레 음의 회전
- y: N축 둘레 양의 회전

이제 HW5에서 추가적으로 구현한 사항을 채점하고 설명하겠습니다.

1. (30점)
2번에서 텍스쳐를 직접 입힌 wood tower와 wolf를 제외한 모든 물체에 대해 gouraud shading과 phong shading을 적용했습니다.
해당 물체들에 대해 프로그램 실행 시 default로 simple shading이 적용됩니다. '1'키를 눌러 gouraud shading, '2'키를 눌러 phong shading, '0'키를 눌러 simple shading으로 변경 가능합니다.
gouraud shading과 phong shading의 차이를 명확히 확인하기 위한 과정을 설명드리겠습니다.
- 프로그램 처음 실행 이후 앞서 설명한 조작 키들로 메인 카메라를 적당히 조절
- 'f'키로 polygon filling enabled 모드 전환
- 'c'키로 back face culled 모드 전환
- 'd'키를 두번 눌러 depth test disabled 모드 전환
- 이후 '1'키와 '2'키를 토글하며 쉐이딩 모드 변경

2. (총 40점)
정적 물체 wood tower과 동적 물체 wolf에 대해 직접 촬영한 이미지로 텍스쳐를 입혔습니다. wood tower에는 Data/static_objects/Wood_Tower_Col.jpg 의 너구리 이미지를, wolf에는 Data/dynamic_objects/wolf/Wolf_Body.jpg 의 삼겹살 이미지를 텍스쳐로 입혔습니다.
디폴트 상태는 linear filter이며, 'N'키와 'L'를 사용하여 각각 nearest filter, linear filter로 전환할 수 있습니다.
현재 입힌 텍스쳐 이미지는 해상도가 높아 두 방식의 차이가 명확히 드러나지 않으나, 원래의 텍스쳐 이미지인 '_Wood_Tower_Col'와 '_Wolf_Body'로 경로를 변경한 후 두 방식의 차이를 명확히 확인 가능합니다. (원래의 이미지 파일 이름 가장 앞에 _를 붙이면 됩니다.)
텍스쳐 구현은 1.에서 설명드린 과정을 통해 동일하게 확인 가능합니다.

3. (20점)
세상 좌표계 기준의 광원을 구현했습니다. 광원의 위치 정보는 Scene_Definitions.h의 Scene 생성자 내부에 존재합니다. 이 광원은 '3'키를 통해 on/off가 가능합니다. default로 켜져있습니다.
주의할 점은 이 프로그램에서 구현한 모든 조명은 gouraud shading과 phong shading, 그리고 텍스쳐 매핑에 대한 phong texture shading에만 적용됩니다. 따라서 '0'키나 default 값으로 설정된 simple shading에 대해서는 적용되지 않습니다.
따라서 위 광원의 적용을 확인하기 위한 과정은 아래와 같습니다.
- 1.에서 설명한 과정을 통해 gouraud shading이나 phong shading이 적용된 상태
- '3'키를 통해 광원 on/off

4. (30점)
움직이는 동적 cc카메라(윈도우의 왼쪽 아래 마지막에 위치)에 대해 눈 좌표계 기준의 광원을 구현했습니다. 광원의 위치 정보는 Scene_Definitions.h의 Scene 생성자 내부에 존재합니다. 이 광원은 '4'키를 통해 on/off가 가능합니다. default로 꺼져있습니다.
위 광원의 적용을 확인하기 위한 과정은 아래와 같습니다.
- 3. 에서 설명한 과정을 통해 '3'키를 눌러 광원 1이 off된 상태
- '4'키로 광원 2 on
- 'v'키로 카메라 조작 모드 on
- 'space'키로 카메라 회전 모드 on
- 'q','w','e','r','t','y'키로 카메라 회전하며 동적 cc카메라에서 조명 변화 관찰

5. (30점)
움직이는 spider에 고정된 광원을 구현했습니다. 광원의 위치 정보는 Scene_Definitions.h의 Scene 생성자 내부에 존재합니다. 이 광원은 '5'키를 통해 on/off가 가능합니다. default로 꺼져있습니다. 해당 광원을 on/off하며 거미의 색이 변하는 것을 확인 가능합니다.
위 광원의 적용을 확인하기 위한 과정은 아래와 같습니다.
- 4.에서 설명한 과정을 마친 상태
- '5'키로 광원 3 on/off

6. (30점)
정적 물체 teapot에 대해 투명 효과를 구현했습니다. 이 물체는 무게 중심 둘레로 회전하고 있습니다. '6'키를 통해 물체의 투명 모드 on/off가 가능합니다. default로 꺼져있습니다. 투명 모드 on 이후에는 '+','-'키를 통해 투명도 조절이 가능합니다. (shift를 누르지 않아도 동작합니다.)
위 구현을 확인하기 위한 과정은 아래와 같습니다.
- 5.에서 설명한 과정을 마친 상태
- '6'키로 투명 모드 on
- '+','-'키로 투명도 조절

7. 구현 x